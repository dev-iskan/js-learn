	Глобальный объект
Глобальными называют переменные и функции, которые не находятся внутри какой-то функции. То есть, иными словами, если переменная или функция не находятся внутри конструкции function, то они – «глобальные».

В JavaScript все глобальные переменные и функции являются свойствами специального объекта, который называется «глобальный объект» (global object).

В браузере этот объект явно доступен под именем window. Объект window одновременно является глобальным объектом и содержит ряд свойств и методов для работы с окном браузера, но нас здесь интересует только его роль как глобального объекта.

В других окружениях, например Node.JS, глобальный объект может быть недоступен в явном виде, но суть происходящего от этого не изменяется, поэтому далее для обозначения глобального объекта мы будем использовать "window".

Присваивая или читая глобальную переменную, мы, фактически, работаем со свойствами window.

Например:

	 var a = 5; // объявление var создаёт свойство window.a
	alert( window.a ); // 5
	Создать переменную можно и явным присваиванием в window:

	 window.a = 5;
	alert( a ); // 5



Порядок инициализации
Выполнение скрипта происходит в две фазы:

1 - На первой фазе происходит инициализация, подготовка к запуску.
Во время инициализации скрипт сканируется на предмет объявления функций вида Function Declaration, а затем – на предмет объявления переменных var. Каждое такое объявление добавляется в window.
Функции, объявленные как Function Declaration, создаются сразу работающими, а переменные – равными undefined.

2 - На второй фазе – собственно, выполнение.
Присваивание (=) значений переменных происходит, когда поток выполнения доходит до соответствующей строчки кода, до этого они undefined.

В коде ниже указано содержание глобального объекта на момент инициализации и далее последовательно по коду:
	// На момент инициализации, до выполнения кода:
	// window = { f: function, a: undefined, g: undefined }

	var a = 5;
	// window = { f: function, a: 5, g: undefined }

	function f(arg) { /*...*/ }
	// window = { f: function, a: 5, g: undefined } без изменений, f обработана ранее

	var g = function(arg) { /*...*/ };
	// window = { f: function, a: 5, g: function }

Кстати, тот факт, что к началу выполнения кода переменные и функции уже содержатся в window, можно легко проверить, выведя их:
	alert("a" in window); // true,  т.к. есть свойство window.a
	alert(a); // равно undefined,  присваивание будет выполнено далее
	alert(f); // function ...,  готовая к выполнению функция
	alert(g); // undefined, т.к. это переменная, а не Function Declaration

	var a = 5;
	function f() { /*...*/ }
	var g = function() { /*...*/ };

	Присвоение переменной без объявления
В старом стандарте JavaScript переменную можно было создать и без объявления var:
	 a = 5;
	alert( a ); // 5
Такое присвоение, как и var a = 5, создает свойство window.a = 5. Отличие от var a = 5 – в том, что переменная будет создана не на этапе входа в область видимости, а в момент присвоения.

Сравните два кода ниже.

Первый выведет undefined, так как переменная была добавлена в window на фазе инициализации:
	alert( a ); // undefined
	var a = 5;

Второй код выведет ошибку, так как переменной ещё не существует:
	alert( a ); // error, a is not defined
	a = 5;

Это, конечно, для общего понимания, мы всегда объявляем переменные через var.


	Конструкции for, if... не влияют на видимость переменных
Фигурные скобки, которые используются в for, while, if, в отличие от объявлений функции, имеют «декоративный» характер.
В JavaScript нет разницы между объявлением вне блока:
	   var i;
	{
	  i = 5;
	}

…И внутри него:
	i = 5;
	{
	  var i;
	}

Также нет разницы между объявлением в цикле и вне его:
	for (var i = 0; i < 5; i++) { }
Идентичный по функциональности код:
	var i;
	for (i = 0; i < 5; i++) { }

В обоих случаях переменная будет создана до выполнения цикла, на стадии инициализации, и ее значение будет сохранено после окончания цикла.

Не важно, где и сколько раз объявлена переменная
Объявлений var может быть сколько угодно:
	var i = 10;
	for (var i = 0; i < 20; i++) {
	  ...
	}
	var i = 5;

Все var будут обработаны один раз, на фазе инициализации.
На фазе исполнения объявления var будут проигнорированы: они уже были обработаны. Зато будут выполнены присваивания.


	Ошибки при работе с window в IE8-
В старых IE есть две забавные ошибки при работе с переменными в window:

Переопределение переменной, у которой такое же имя, как и id элемента, приведет к ошибке:

 <div id="a">...</div>
<script>
  a = 5; // ошибка в IE8-! Правильно будет "var a = 5"
  alert( a ); // никогда не сработает
</script>
А если сделать через var, то всё будет хорошо.

Это была реклама того, что надо везде ставить var.

Ошибка при рекурсии через функцию-свойство window. Следующий код «умрет» в IE8-:

 <script>
  // рекурсия через функцию, явно записанную в window
  window.recurse = function(times) {
    if (times !== 0) recurse(times - 1);
  }

  recurse(13);
</script>
Проблема здесь возникает из-за того, что функция напрямую присвоена в window.recurse = .... Ее не будет при обычном объявлении функции.

Этот пример выдаст ошибку только в настоящем IE8! Не IE9 в режиме эмуляции. Вообще, режим эмуляции позволяет отлавливать где-то 95% несовместимостей и проблем, а для оставшихся 5% вам нужен будет настоящий IE8 в виртуальной машине.




	Замыкания, функции изнутри

Лексическое окружение
Все переменные внутри функции – это свойства специального внутреннего объекта LexicalEnvironment, который создаётся при её запуске.

Мы будем называть этот объект «лексическое окружение» или просто «объект переменных».

При запуске функция создает объект LexicalEnvironment, записывает туда аргументы, функции и переменные. Процесс инициализации выполняется в том же порядке, что и для глобального объекта, который, вообще говоря, является частным случаем лексического окружения.

В отличие от window, объект LexicalEnvironment является внутренним, он скрыт от прямого доступа.

Пример
Посмотрим пример, чтобы лучше понимать, как это работает:

	function sayHi(name) {
	  var phrase = "Привет, " + name;
	  alert( phrase );
	}

	sayHi('Вася');

При вызове функции:
1 - До выполнения первой строчки её кода, на стадии инициализации, интерпретатор создает пустой объект LexicalEnvironment и заполняет его.
В данном случае туда попадает аргумент name и единственная переменная phrase:

	function sayHi(name) {
	  // LexicalEnvironment = { name: 'Вася', phrase: undefined }
	  var phrase = "Привет, " + name;
	  alert( phrase );
	}

	sayHi('Вася');

2 - Функция выполняется.
Во время выполнения происходит присвоение локальной переменной phrase, то есть, другими словами, присвоение свойству LexicalEnvironment.phrase нового значения:

	function sayHi(name) {
	  // LexicalEnvironment = { name: 'Вася', phrase: undefined }
	  var phrase = "Привет, " + name;

	  // LexicalEnvironment = { name: 'Вася', phrase: 'Привет, Вася'}
	  alert( phrase );
	}

	sayHi('Вася');

В конце выполнения функции объект с переменными обычно выбрасывается и память очищается. В примерах выше так и происходит. Через некоторое время мы рассмотрим более сложные ситуации, при которых объект с переменными сохраняется и после завершения функции.



	Доступ ко внешним переменным
Из функции мы можем обратиться не только к локальной переменной, но и к внешней:

	var userName = "Вася";

	function sayHi() {
	  alert( userName ); // "Вася"
	}

Интерпретатор, при доступе к переменной, сначала пытается найти переменную в текущем LexicalEnvironment, а затем, если её нет – ищет во внешнем объекте переменных. В данном случае им является window.

Такой порядок поиска возможен благодаря тому, что ссылка на внешний объект переменных хранится в специальном внутреннем свойстве функции, которое называется [[Scope]]. Это свойство закрыто от прямого доступа, но знание о нём очень важно для понимания того, как работает JavaScript.

При создании функция получает скрытое свойство [[Scope]], которое ссылается на лексическое окружение, в котором она была создана.

В примере выше таким окружением является window, так что создаётся свойство:

sayHi.[[Scope]] = window
Это свойство никогда не меняется. Оно всюду следует за функцией, привязывая её, таким образом, к месту своего рождения.

При запуске функции её объект переменных LexicalEnvironment получает ссылку на «внешнее лексическое окружение» со значением из [[Scope]].

Если переменная не найдена в функции – она будет искаться снаружи.

Именно благодаря этой механике в примере выше alert(userName) выводит внешнюю переменную. На уровне кода это выглядит как поиск во внешней области видимости, вне функции.

Если обобщить:

Каждая функция при создании получает ссылку [[Scope]] на объект с переменными, в контексте которого была создана.
При запуске функции создаётся новый объект с переменными LexicalEnvironment. Он получает ссылку на внешний объект переменных из [[Scope]].
При поиске переменных он осуществляется сначала в текущем объекте переменных, а потом – по этой ссылке.
Выглядит настолько просто, что непонятно – зачем вообще говорить об этом [[Scope]], об объектах переменных. Сказали бы: «Функция читает переменные снаружи» – и всё. Но знание этих деталей позволит нам легко объяснить и понять более сложные ситуации, с которыми мы столкнёмся далее.



	Всегда текущее значение
Значение переменной из внешней области берётся всегда текущее. Оно может быть уже не то, что было на момент создания функции.
Например, в коде ниже функция sayHi берёт phrase из внешней области:

	var phrase = 'Привет';

	function sayHi(name) {
	  alert(phrase + ', ' + name);
	}

	sayHi('Вася');  // Привет, Вася (*)
	phrase = 'Пока';
	sayHi('Вася'); // Пока, Вася (**)

На момент первого запуска (*), переменная phrase имела значение 'Привет', а ко второму (**) изменила его на 'Пока'.
Это естественно, ведь для доступа к внешней переменной функция по ссылке [[Scope]] обращается во внешний объект переменных и берёт то значение, которое там есть на момент обращения.


Вложенные функции
Внутри функции можно объявлять не только локальные переменные, но и другие функции.
К примеру, вложенная функция может помочь лучше организовать код:

	function sayHiBye(firstName, lastName) {

	  alert( "Привет, " + getFullName() );
	  alert( "Пока, " + getFullName() );

	  function getFullName() {
	    return firstName + " " + lastName;
	  }

	}

	sayHiBye("Вася", "Пупкин"); // Привет, Вася Пупкин ; Пока, Вася Пупкин

Здесь, для удобства, создана вспомогательная функция getFullName().

Вложенные функции получают [[Scope]] так же, как и глобальные. В нашем случае:
	getFullName.[[Scope]] = объект переменных текущего запуска sayHiBye
Благодаря этому getFullName() получает снаружи firstName и lastName.
Заметим, что если переменная не найдена во внешнем объекте переменных, то она ищется в ещё более внешнем (через [[Scope]] внешней функции), то есть, такой пример тоже будет работать:

	 var phrase = 'Привет';

	function say() {
	  function go() {
	    alert( phrase ); // найдёт переменную снаружи
	  }
	  go();
	}

	say();



	Возврат функции
Рассмотрим более «продвинутый» вариант, при котором внутри одной функции создаётся другая и возвращается в качестве результата.
В разработке интерфейсов это совершенно стандартный приём, функция затем может назначаться как обработчик действий посетителя.
Здесь мы будем создавать функцию-счётчик, которая считает свои вызовы и возвращает их текущее число.
В примере ниже makeCounter создает такую функцию:

	function makeCounter() {
	  var currentCount = 1;

	  return function() { // (**)
	    return currentCount++;
	  };
	}

	var counter = makeCounter(); // (*)

	// каждый вызов увеличивает счётчик и возвращает результат
	alert( counter() ); // 1
	alert( counter() ); // 2
	alert( counter() ); // 3

	// создать другой счётчик, он будет независим от первого
	var counter2 = makeCounter();
	alert( counter2() ); // 1

Как видно, мы получили два независимых счётчика counter и counter2, каждый из которых незаметным снаружи образом сохраняет текущее количество вызовов.
Где? Конечно, во внешней переменной currentCount, которая у каждого счётчика своя.
Если подробнее описать происходящее:

1 - В строке (*) запускается makeCounter(). При этом создаётся LexicalEnvironment для переменных текущего вызова. В функции есть одна переменная var currentCount, которая станет свойством этого объекта. Она изначально инициализуется в undefined, затем, в процессе выполнения, получит значение 1:

	function makeCounter() {
	  // LexicalEnvironment = { currentCount: undefined }

	  var currentCount = 1;

	  // LexicalEnvironment = { currentCount: 1 }

	  return function() { // [[Scope]] -> LexicalEnvironment (**)
	    return currentCount++;
	  };
	}

	var counter = makeCounter(); // (*)


2 - В процессе выполнения makeCounter() создаёт функцию в строке (**). При создании эта функция получает внутреннее свойство [[Scope]] со ссылкой на текущий LexicalEnvironment.

3 - Далее вызов makeCounter() завершается и функция (**) возвращается и сохраняется во внешней переменной counter (*).
На этом создание «счётчика» завершено.
Итоговым значением, записанным в переменную counter, является функция:

	function() { // [[Scope]] -> {currentCount: 1}
	  return currentCount++;
	};

Возвращённая из makeCounter() функция counter помнит (через [[Scope]]) о том, в каком окружении была создана.
Это и используется для хранения текущего значения счётчика.
Далее, когда-нибудь, функция counter будет вызвана. Мы не знаем, когда это произойдёт. Может быть, прямо сейчас, но, вообще говоря, совсем не факт.
Эта функция состоит из одной строки: return currentCount++, ни переменных ни параметров в ней нет, поэтому её собственный объект переменных, для краткости назовём его LE – будет пуст.
Однако, у неё есть свойство [[Scope]], которое указывает на внешнее окружение. Чтобы увеличить и вернуть currentCount, интерпретатор ищет в текущем объекте переменных LE, не находит, затем идёт во внешний объект, там находит, изменяет и возвращает новое значение:

	 function makeCounter() {
	  var currentCount = 1;

	  return function() {
	    return currentCount++;
	  };
	}

	var counter = makeCounter(); // [[Scope]] -> {currentCount: 1}

	alert( counter() ); // 1, [[Scope]] -> {currentCount: 1}
	alert( counter() ); // 2, [[Scope]] -> {currentCount: 2}
	alert( counter() ); // 3, [[Scope]] -> {currentCount: 3}

Переменную во внешней области видимости можно не только читать, но и изменять.

В примере выше было создано несколько счётчиков. Все они взаимно независимы:
	var counter = makeCounter();
	var counter2 = makeCounter();
	alert( counter() ); // 1
	alert( counter() ); // 2
	alert( counter() ); // 3

	alert( counter2() ); // 1, счётчики независимы

Они независимы, потому что при каждом запуске makeCounter создаётся свой объект переменных LexicalEnvironment, со своим свойством currentCount, на который новый счётчик получит ссылку [[Scope]].




	Свойства функции
Функция в JavaScript является объектом, поэтому можно присваивать свойства прямо к ней, вот так:

	 function f() {}
	f.test = 5;
	alert( f.test );

Свойства функции не стоит путать с переменными и параметрами. Они совершенно никак не связаны. Переменные доступны только внутри функции, они создаются в процессе её выполнения. Это – использование функции «как функции».
А свойство у функции – доступно отовсюду и всегда. Это – использование функции «как объекта».
Если хочется привязать значение к функции, то можно им воспользоваться вместо внешних переменных.
В качестве демонстрации, перепишем пример со счётчиком:

	function makeCounter() {
	  function counter() {
	    return counter.currentCount++;
	  };
	  counter.currentCount = 1;

	  return counter;
	}

	var counter = makeCounter();
	alert( counter() ); // 1
	alert( counter() ); // 2

При запуске пример работает также.
Принципиальная разница – во внутренней механике и в том, что свойство функции, в отличие от переменной из замыкания – общедоступно, к нему имеет доступ любой, у кого есть объект функции.
Например, можно взять и поменять счётчик из внешнего кода:

	var counter = makeCounter();
	alert( counter() ); // 1

	counter.currentCount = 5;
	alert( counter() ); // 5

	Статические переменные
Иногда свойства, привязанные к функции, называют «статическими переменными».
В некоторых языках программирования можно объявлять переменную, которая сохраняет значение между вызовами функции. В JavaScript ближайший аналог – такое вот свойство функции.



Замыкание – это функция вместе со всеми внешними переменными, которые ей доступны.
Таково стандартное определение, которое есть в Wikipedia и большинстве серьёзных источников по программированию. То есть, замыкание – это функция + внешние переменные.
Тем не менее, в JavaScript есть небольшая терминологическая особенность.

Обычно, говоря «замыкание функции», подразумевают не саму эту функцию, а именно внешние переменные.
Иногда говорят «переменная берётся из замыкания». Это означает – из внешнего объекта переменных.

Что это такое – «понимать замыкания?»
Иногда говорят «Вася молодец, понимает замыкания!». Что это такое – «понимать замыкания», какой смысл обычно вкладывают в эти слова?
«Понимать замыкания» в JavaScript означает понимать следующие вещи:

1- Все переменные и параметры функций являются свойствами объекта переменных LexicalEnvironment. Каждый запуск функции создает новый такой объект. На верхнем уровне им является «глобальный объект», в браузере – window.

2 - При создании функция получает системное свойство [[Scope]], которое ссылается на LexicalEnvironment, в котором она была создана.

3 - При вызове функции, куда бы её ни передали в коде – она будет искать переменные сначала у себя, а затем во внешних LexicalEnvironment с места своего «рождения».




[[Scope]] для new Function
Присвоение [[Scope]] для new Function
Есть одно исключение из общего правила присвоения [[Scope]], которое мы рассматривали в предыдущей главе.

При создании функции с использованием new Function, её свойство [[Scope]] ссылается не на текущий LexicalEnvironment, а на window.

Пример
Следующий пример демонстрирует как функция, созданная new Function, игнорирует внешнюю переменную a и выводит глобальную вместо неё:

	var a = 1;
	function getFunc() {
	  var a = 2;

	  var func = new Function('', 'alert(a)');

	  return func;
	}

	getFunc()(); // 1, из window

Сравним с обычным поведением:

	var a = 1;
	function getFunc() {
	  var a = 2;

	  var func = function() { alert(a); };

	  return func;
	}

	getFunc()(); // 2, из LexicalEnvironment функции getFunc


Почему так сделано?
Продвинутые знания
Содержимое этой секции содержит продвинутую информацию теоретического характера, которая прямо сейчас не обязательна для дальнейшего изучения JavaScript.

Эта особенность new Function, хоть и выглядит странно, на самом деле весьма полезна.

Представьте себе, что нам действительно нужно создать функцию из строки кода. Текст кода этой функции неизвестен на момент написания скрипта (иначе зачем new Function), но станет известен позже, например получен с сервера или из других источников данных.

Предположим, что этому коду надо будет взаимодействовать с внешними переменными основного скрипта.

Но проблема в том, что JavaScript при выкладывании на «боевой сервер» предварительно сжимается минификатором – специальной программой, которая уменьшает размер кода, убирая из него лишние комментарии, пробелы, что очень важно – переименовывает локальные переменные на более короткие.

То есть, если внутри функции есть var userName, то минификатор заменит её на var a (или другую букву, чтобы не было конфликта), предполагая, что так как переменная видна только внутри функции, то этого всё равно никто не заметит, а код станет короче. И обычно проблем нет.

…Но если бы new Function могла обращаться к внешним переменным, то при попытке доступа к userName в сжатом коде была бы ошибка, так как минификатор переименовал её.

Получается, что даже если бы мы захотели использовать локальные переменные в new Function, то после сжатия были бы проблемы, так как минификатор переименовывает локальные переменные.

Описанная особенность new Function просто-таки спасает нас от ошибок.

Ну а если внутри функции, создаваемой через new Function, всё же нужно использовать какие-то данные – без проблем, нужно всего лишь предусмотреть соответствующие параметры и передавать их явным образом, например так:

	var sum = new Function('a, b', ' return a + b; ');

	var a = 1, b = 2;

	alert( sum(a, b) ); // 3

Итого
Функции, создаваемые через new Function, имеют значением [[Scope]] не внешний объект переменных, а window.
Следствие – такие функции не могут использовать замыкание. Но это хорошо, так как бережёт от ошибок проектирования, да и при сжатии JavaScript проблем не будет. Если же внешние переменные реально нужны – их можно передать в качестве параметров.







	Локальные переменные для объекта
Замыкания можно использовать сотнями способов. Иногда люди сами не замечают, что использовали замыкания – настолько это просто и естественно.

В этой главе мы рассмотрим дополнительные примеры использования замыканий и задачи на эту тему.

Счётчик-объект
Ранее мы сделали счётчик.

Напомню, как он выглядел:

	 function makeCounter() {
	  var currentCount = 1;

	  return function() {
	    return currentCount++;
	  };
	}

	var counter = makeCounter();

	// каждый вызов возвращает результат, увеличивая счётчик
	alert( counter() ); // 1
	alert( counter() ); // 2
	alert( counter() ); // 3

Счётчик получился вполне рабочий, но вот только возможностей ему не хватает. Хорошо бы, чтобы можно было сбрасывать значение счётчика или начинать отсчёт с другого значения вместо 1 или… Да много чего можно захотеть от простого счётчика и, тем более, в более сложных проектах.

Чтобы добавить счётчику возможностей – перейдём с функции на полноценный объект:

	 function makeCounter() {
	  var currentCount = 1;

	  return { // возвратим объект вместо функции
	    getNext: function() {
	      return currentCount++;
	    },

	    set: function(value) {
	      currentCount = value;
	    },

	    reset: function() {
	      currentCount = 1;
	    }
	  };
	}

	var counter = makeCounter();

	alert( counter.getNext() ); // 1
	alert( counter.getNext() ); // 2

	counter.set(5);
	alert( counter.getNext() ); // 5

Теперь функция makeCounter возвращает не одну функцию, а объект с несколькими методами:

getNext() – получить следующее значение, то, что раньше делал вызов counter().
set(value) – поставить значение.
reset() – обнулить счётчик.

Все они получают ссылку [[Scope]] на текущий (внешний) объект переменных. Поэтому вызов любого из этих методов будет получать или модифицировать одно и то же внешнее значение currentCount.

	Объект счётчика + функция
Изначально, счётчик делался функцией во многом ради красивого вызова: counter(), который увеличивал значение и возвращал результат.
К сожалению, при переходе на объект короткий вызов пропал, вместо него теперь counter.getNext(). Но он ведь был таким простым и удобным…

Поэтому давайте вернём его!

	function makeCounter() {
	  var currentCount = 1;

	  // возвращаемся к функции
	  function counter() {
	    return currentCount++;
	  }

	  // ...и добавляем ей методы!
	  counter.set = function(value) {
	    currentCount = value;
	  };

	  counter.reset = function() {
	    currentCount = 1;
	  };

	  return counter;
	}

	var counter = makeCounter();

	alert( counter() ); // 1
	alert( counter() ); // 2

	counter.set(5);
	alert( counter() ); // 5

Красиво, не правда ли? Получился полноценный объект, который можно вдобавок ещё и вызывать.

Этот трюк часто используется при разработке JavaScript-библиотек. Например, популярная библиотека jQuery предоставляет глобальную переменную с именем jQuery (доступна также под коротким именем $), которая с одной стороны является функцией и может вызываться как jQuery(...), а с другой – у неё есть различные методы, например jQuery.type(123) возвращает тип аргумента.







	Модули через замыкания
Приём программирования «модуль» имеет громадное количество вариаций. Он немного похож на счётчик, который мы рассматривали ранее, использует аналогичный приём, но на уровне выше.
Его цель – скрыть внутренние детали реализации скрипта. В том числе: временные переменные, константы, вспомогательные мини-функции и т.п.
Зачем нужен модуль?
Допустим, мы хотим разработать скрипт, который делает что-то полезное на странице.
Умея работать со страницей, мы могли бы сделать много чего, но так как пока этого не было (скоро научимся), то пусть скрипт просто выводит сообщение:
Файл hello.js

	 // глобальная переменная нашего скрипта
	var message = "Привет";

	// функция для вывода этой переменной
	function showMessage() {
	  alert( message );
	}

	// выводим сообщение
	showMessage();

У этого скрипта есть свои внутренние переменные и функции.
В данном случае это message и showMessage.
Предположим, что мы хотели бы распространять этот скрипт в виде библиотеки. Каждый, кто хочет, чтобы посетителям выдавалось «Привет» – может просто подключить этот скрипт. Достаточно скачать и подключить, например, как внешний файл hello.js – и готово.
Если подключить подобный скрипт к странице «как есть», то возможен конфликт с переменными, которые она использует.
То есть, при подключении к такой странице он её «сломает»:

	<script>
	  var message = "Пожалуйста, нажмите на кнопку";
	</script>
	<script src="hello.js"></script>

	<button>Кнопка</button>
	<script>
	  // ожидается сообщение из переменной выше...
	  alert( message ); // но на самом деле будет выведено "Привет"
	</script>

Автор страницы ожидает, что библиотека "hello.js" просто отработает, без побочных эффектов. А она вместе с этим переопределила message в "Привет".
Если же убрать скрипт hello.js, то страница будет выводить правильное сообщение.
Зная внутреннее устройство hello.js нам, конечно, понятно, что проблема возникла потому, что переменная message из скрипта hello.js перезаписала объявленную на странице.


	Приём проектирования «Модуль»
Чтобы проблемы не было, всего-то нужно, чтобы у скрипта была своя собственная область видимости, чтобы его переменные не попали на страницу.
Для этого мы завернём всё его содержимое в функцию, которую тут же запустим.
Файл hello.js, оформленный как модуль:

	 (function() {

	  // глобальная переменная нашего скрипта
	  var message = "Привет";

	  // функция для вывода этой переменной
	  function showMessage() {
	    alert( message );
	  }

	  // выводим сообщение
	  showMessage();

	})();

Этот скрипт при подключении к той же странице будет работать корректно.
Будет выводиться «Привет», а затем «Пожалуйста, нажмите на кнопку».

	Зачем скобки вокруг функции?
В примере выше объявление модуля выглядит так:
	 (function() {

	  alert( "объявляем локальные переменные, функции, работаем" );
	  // ...

	}());

В начале и в конце стоят скобки, так как иначе была бы ошибка.
Вот, для сравнения, неверный вариант:

	 function() {
	  // будет ошибка
	}();

Ошибка при его запуске произойдет потому, что браузер, видя ключевое слово function в основном потоке кода, попытается прочитать Function Declaration, а здесь имени нет.
Впрочем, даже если имя поставить, то работать тоже не будет:

	 function work() {
	  // ...
	}(); // syntax error

Дело в том, что «на месте» разрешено вызывать только Function Expression.

Общее правило таково:
Если браузер видит function в основном потоке кода – он считает, что это Function Declaration.
Если же function идёт в составе более сложного выражения, то он считает, что это Function Expression.
Для этого и нужны скобки – показать, что у нас Function Expression, который по правилам JavaScript можно вызвать «на месте».

Можно показать это другим способом, например поставив перед функцией оператор:

	 +function() {
	  alert('Вызов на месте');
	}();

	!function() {
	  alert('Так тоже будет работать');
	}();



Экспорт значения
Приём «модуль» используется почти во всех современных библиотеках.

Ведь что такое библиотека? Это полезные функции, ради которых её подключают, плюс временные переменные и вспомогательные функции, которые библиотека использует внутри себя.
Посмотрим, к примеру, на библиотеку Lodash, хотя могли бы и jQuery, там почти то же самое.

Если её подключить, то появится специальная переменная lodash (короткое имя _), которую можно использовать как функцию, и кроме того в неё записаны различные полезные свойства, например:

	_.defaults(src, dst1, dst2...) – копирует в объект src те свойства из объектов dst1, dst2 и других, которых там нет.
	_.cloneDeep(obj) – делает глубокое копирование объекта obj, создавая полностью независимый клон.
	_.size(obj) – возвращает количество свойств в объекте, полиморфная функция: можно передать массив или даже 1 значение.

Есть и много других функций, подробнее описанных в документации.

Пример использования:

	<p>Подключим библиотеку</p>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js"></script>

	<p>Функция <code>_.defaults()</code> добавляет отсутствующие свойства.</p>
	<script>
	  var user = {
	    name: 'Вася'
	  };

	  _.defaults(user, {
	    name: 'Не указано',
	    employer: 'Не указан'
	  });

	  alert( user.name ); // Вася
	  alert( user.employer ); // Не указан
	  alert( _.size(user) ); // 2
	</script>

Здесь нам не важно, какие функции или методы библиотеки используются, нас интересует именно как описана эта библиотека, как в ней применяется приём «модуль».
Вот примерная выдержка из исходного файла:

	;(function() {

	  // lodash - основная функция для библиотеки
	  function lodash(value) {
	    // ...
	  }

	  // вспомогательная переменная
	  var version = '2.4.1';
	  // ... другие вспомогательные переменные и функции

	  // код функции size, пока что доступен только внутри
	  function size(collection) {
	    return Object.keys(collection).length;
	  }

	  // присвоим в lodash size и другие функции, которые нужно вынести из модуля
	  lodash.size = size
	  // lodash.defaults = ...
	  // lodash.cloneDeep = ...

	  // "экспортировать" lodash наружу из модуля
	  window._ = lodash; // в оригинальном коде здесь сложнее, но смысл тот же

	}());

Внутри внешней функции:

Происходит что угодно, объявляются свои локальные переменные, функции.
В window выносится то, что нужно снаружи.
Технически, мы могли бы вынести в window не только lodash, но и вообще все объекты и функции. На практике, как раз наоборот, всё прячут внутри модуля, глобальную область во избежание конфликтов хранят максимально чистой.

Зачем точка с запятой в начале?
В начале кода выше находится точка с запятой ; – это не опечатка, а особая «защита от дураков».
Если получится, что несколько JS-файлов объединены в один (и, скорее всего, сжаты минификатором, но это не важно), и программист забыл поставить точку с запятой, то будет ошибка.

Например, первый файл a.js:

var a = 5

Второй файл lib.js:

(function() {
  // без точки с запятой в начале
})()

После объединения в один файл:

	var a = 5

	// библиотека
	(function() {
	  // ...
	})();

При запуске будет ошибка, потому что интерпретатор перед скобкой сам не вставит точку с запятой. Он просто поймёт код как var a = 5(function ...), то есть пытается вызвать число 5 как функцию.
Таковы правила языка, и поэтому рекомендуется явно ставить точку с запятой. В данном случае автор lodash ставит ; перед функцией, чтобы предупредить эту ошибку.


	Экспорт через return
Можно оформить модуль и чуть по-другому, например передать значение через return:

	var lodash = (function() {

	  var version;
	  function assignDefaults() { ... }

	  return {
	    defaults: function() {  }
	  }

	})();

Здесь, кстати, скобки вокруг внешней function() { ... } не обязательны, ведь функция и так объявлена внутри выражения присваивания, а значит – является Function Expression.
Тем не менее, лучше их ставить, для улучшения читаемости кода, чтобы было сразу видно, что это не простое присвоение функции.


Итого
Модуль при помощи замыканий – это оборачивание пакета функционала в единую внешнюю функцию, которая тут же выполняется.

Все функции модуля будут иметь доступ к другим переменным и внутренним функциям этого же модуля через замыкание.

Например, defaults из примера выше имеет доступ к assignDefaults.

Но снаружи программист, использующий модуль, может обращаться напрямую только к тем переменным и функциям, которые экспортированы. Благодаря этому будут скрыты внутренние аспекты реализации, которые нужны только разработчику модуля.

Можно придумать и много других вариаций такого подхода. В конце концов, «модуль» – это всего лишь функция-обёртка для скрытия переменных.







	Устаревшая конструкция "with"
Конструкция with позволяет использовать в качестве области видимости для переменных произвольный объект.
В современном JavaScript от этой конструкции отказались. С use strict она не работает, но её ещё можно найти в старом коде, так что стоит познакомиться с ней, чтобы если что – понимать, о чём речь.

Синтаксис:
	with(obj) {
	  ...код...
	}

Любое обращение к переменной внутри with сначала ищет её среди свойств obj, а только потом – вне with.
Пример
В примере ниже переменная будет взята не из глобальной области, а из obj:

	var a = 5;

	var obj = {
	  a: 10
	};

	with(obj) {
	    alert( a ); // 10, из obj
	  }

Попробуем получить переменную, которой в obj нет:

	var b = 1;

	var obj = {
	  a: 10
	};

	with(obj) {
	    alert( b ); // 1, из window
	  }

Здесь интерпретатор сначала проверяет наличие obj.b, не находит и идет вне with.
Особенно забавно выглядит применение вложенных with:

	var obj = {
	  weight: 10,
	  size: {
	    width: 5,
	    height: 7
	  }
	};

	with(obj) {
	  with(size) { // size будет взят из obj
	    alert( width * height / weight ); // width,height из size, weight из obj
	  }
	}

Свойства из разных объектов используются как обычные переменные… Магия! Порядок поиска переменных в выделенном коде: size => obj => window.



	Изменения переменной
При использовании with, как и во вложенных функциях – переменная изменяется в той области, где была найдена.
Например:

	var obj = {
	  a: 10
	}

	with(obj) {
	    a = 20;
	  }
	alert( obj.a ); // 20, переменная была изменена в объекте


	Почему отказались от with?
Есть несколько причин.
В современном стандарте JavaScript отказались от with, потому что конструкция with подвержена ошибкам и непрозрачна.
Проблемы возникают в том случае, когда в with(obj) присваивается переменная, которая по замыслу должна быть в свойствах obj, но ее там нет.

Например:

	 var obj = {
	  weight: 10
	};

	with(obj) {
	  weight = 20; // (1)
	  size = 35; // (2)
	}

	alert( obj.size );
	alert( window.size );

В строке (2) присваивается свойство, отсутствующее в obj. В результате интерпретатор, не найдя его, создает новую глобальную переменную window.size.
Такие ошибки редки, но очень сложны в отладке, особенно если size изменилась не в window, а где-нибудь во внешнем LexicalEnvironment.

Еще одна причина – алгоритмы сжатия JavaScript не любят with. Перед выкладкой на сервер JavaScript сжимают. Для этого есть много инструментов, например Closure Compiler и UglifyJS. Обычно они переименовывают локальные переменные в более короткие имена, но не свойства объектов. С конструкцией with до запуска кода непонятно – откуда будет взята переменная. Поэтому выходит, что, на всякий случай (если это свойство), лучше её не переименовывать. Таким образом, качество сжатия кода страдает.

Ну и, наконец, производительность – усложнение поиска переменной из-за with влечет дополнительные накладные расходы.
Современные движки применяют много внутренних оптимизаций, ряд которых не может быть применен к коду, в котором есть with.

Вот, к примеру, запустите этот код в современном браузере. Производительность функции fast существенно отличается от slow с пустым(!) with. И дело тут именно в with, т.к. наличие этой конструкции препятствует оптимизации.

	 var i = 0;

	function fast() {
	  i++;
	}

	function slow() {
	  with(i) {}
	  i++;
	}

	var time = performance.now();
	while (i < 1000000) fast();
	alert( "Без with: " + (performance.now() - time) );

	var time = performance.now();
	i = 0;
	while (i < 1000000) slow();
	alert( "С with: " + (performance.now() - time) );

	Замена with
Вместо with рекомендуется использовать временную переменную, например:

	/* вместо
	with(elem.style) {
	  top = '10px';
	  left = '20px';
	}
	*/

	var s = elem.style;

	s.top = '10px';
	s.left = '0';
	
Это не так элегантно, но убирает лишний уровень вложенности и абсолютно точно понятно, что будет происходить и куда присвоятся свойства.

Итого
Конструкция with(obj) { ... } использует obj как дополнительную область видимости. Все переменные, к которым идет обращение внутри блока, сначала ищутся в obj.
Конструкция with устарела и не рекомендуется по ряду причин. Избегайте её.