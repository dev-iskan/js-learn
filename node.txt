install nodemon:
  yarn global add nodemon

in order to read filesystem we require it from node_modules
  const fs = require('fs') - this package is out of the box of node

then by using method fs.readFileSync we access our data.json file:
  const json = fs.readFileSync(`${__dirname}/data/data.json`, 'utf-8')
where first parameter is path to file and second is encoding format

then we parse to real js object by using JSON.parse
  const laptopData = JSON.parse(json)

next we create server:
first import http package
  const http = require('http')

then create server and pass callback which runs when someone access server:
  const server = http.createServer((req, res) => {
    console.log('Someone did access the server')
  })

and last set listener to listen port and ip:
  server.listen(1337, '127.0.0.1', () => {
    console.log('Listening for requests')
  })

edit server init in order to set header and response on request:
  const server = http.createServer((req, res) => {
    res.writeHead(200, {
      'Content-type': 'text/html'
    })
    res.end('This is response')
  })



add url package:
  const url = require('url')

 req.url - is url on which we requesting
 const query = url.parse(req.url, true) // we parse url to get detailed info about url
 const pathName = url.parse(req.url, true).pathname // pathname in url
 const query = url.parse(req.url, true).query // query in url parsed into object
 const query = url.parse(req.url, true).query.id // id from query
  

in order to restrict access to laptop page if there is no such id we use such expression:
  if (pathName === '/laptop' && id < laptopData.length) {
    res.writeHead(200, {
      'Content-type': 'text/html'
    })
    res.end(`This is Laptop page response for id = ${id}`)
  }


response laptop output:
  if (pathName === '/laptop' && id < laptopData.length) {
    res.writeHead(200, {
      'Content-type': 'text/html'
    })
    // async function to read file
    fs.readFile(`${__dirname}/templates/laptop.html`, 'utf-8', (err, readData) => {
      const laptop = laptopData[id]
      res.end(replaceTemplate(readData, laptop))
    })
  }

where replaceTemplate is function:
  function replaceTemplate (originalHtml, laptop) {
    let output = originalHtml.replace(/{%PRODUCTNAME%}/g, laptop.productName)
    output = output.replace(/{%IMAGE%}/g, laptop.image)
    output = output.replace(/{%PRICE%}/g, laptop.price)
    output = output.replace(/{%SCREEN%}/g, laptop.screen)
    output = output.replace(/{%CPU%}/g, laptop.cpu)
    output = output.replace(/{%STORAGE%}/g, laptop.storage)
    output = output.replace(/{%RAM%}/g, laptop.ram)
    output = output.replace(/{%DESCRIPTION%}/g, laptop.description)
    output = output.replace(/{%ID%}/g, laptop.id)
    return output
  }


products page:
  if(pathName === '/products' || pathName === '/') {
    res.writeHead(200, {
      'Content-type': 'text/html'
    })
    
    fs.readFile(`${__dirname}/templates/overview.html`, 'utf-8', (err, overviewData) => {
      fs.readFile(`${__dirname}/templates/cart.html`, 'utf-8', (err, cartData) => {
        // create array of carts in html and join by empty string
        const cartOutputs = laptopData.map(el => replaceTemplate(cartData, el)).join('')
        const overviewOuput = overviewData.replace(/{%CARDS%}/g, cartOutputs)
        res.end(overviewOuput)
      })
    })
  }


image path to retrieve images:
  // image path need to get image from server, as node doesn't see filesystem as usual server
  else if ((/\.(jpg|jpeg|png|gif)$/i).test(pathName)) {
    fs.readFile(`${__dirname}/data/img/${pathName}`, (err, data) => {
      res.writeHead(200, {'Content-type': 'image/jpg'})
      res.end(data)
    })
  }